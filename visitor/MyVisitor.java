//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import visitor.BB;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MyVisitor<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   ProgramCFG programCFG;

   public MyVisitor(ProgramCFG cfg){
        programCFG = cfg; 
   }

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //
   
   public static Map<String, Map<String, String>> class_vars_type_map= new HashMap<>();
   public static Map<String, Map<String, Map<String, String>>> class_method_vars_type_map = new HashMap<>();
   public static Map<String, String> vars_type_map; //temp
   public static Map<String, Map<String, String>> method_vars_type_map; //temp
   // public static Map<String, String> fp_type_map;
   public static ArrayList<String> method_names_list; //temp
   public static Map<String, ArrayList<String>> class_method_names_map = new HashMap<>();
   public static Map<String, Map<String, Map<String, String>>> class_method_formal_parameter_type_map = new HashMap<>();
   public static Map<String, ArrayList<String>> extends_info = new HashMap<>();
   public static Map<String, ArrayList<String>> inherit_info = new HashMap<>();
   public String class_name, method_name;
   public static ArrayList<String> class_names_method_names = new ArrayList();
   public ArrayList<String> objnum = new ArrayList<>();
   public static Map<Integer, Boolean> mono_tracker = new HashMap();
   public static ArrayList<String> temp_class_list = new ArrayList<>();
   int count = 0;
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      // System.out.println(class_vars_type_map);
      // System.out.println(class_method_vars_type_map);
      // System.out.println(class_method_names_map);
      // System.out.println(extends_info);
      // System.out.println(inherit_info);
      // System.out.println(visitor.BB.global_obj_stack);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      class_name = n.f1.f0.tokenImage;
      method_name = "main";
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> ( StaticMethodDeclaration() )*
    * f6 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      String classname, var_name, method_name, st1, st2;
      int i, j, k;
      n.f0.accept(this);
      classname = n.f1.f0.tokenImage; //class name
      class_name = classname;
      n.f2.accept(this);
      vars_type_map = new HashMap<>();
      for(i = 0; i<n.f3.size(); i++){//iterate over no. of local variables
         var_name = (String)(((VarDeclaration)n.f3.elementAt(i)).f1.f0.tokenImage);
         k = (int)(((VarDeclaration)(n.f3.elementAt(i))).f0.f0.which);
         if(k == 3)
            st2 = ((Identifier)(((VarDeclaration)n.f3.elementAt(i)).f0.f0.choice)).f0.tokenImage;
         else
            st2 = null;
         vars_type_map.put(var_name, st2); //{class_local_variables, type}
      }
         // String var_name = n.f3.f1.f0.tokenImage;
      class_vars_type_map.put(classname, vars_type_map); //{classname, local variables}
      // class_vars_list.clear();
      // System.out.println(class_vars_type_map);
      method_vars_type_map = new HashMap<>(); 
      method_names_list = new ArrayList<>();
      // method_fp_type_map = new HashMap<>();
      for(i = 0; i<n.f4.size(); i++){//iterate over no. of methods
         vars_type_map = new HashMap<>();
         MethodDeclaration md = (MethodDeclaration)n.f4.elementAt(i);
         method_name = (String)(md.f2.f0.tokenImage); //method name
         method_names_list.add(method_name);
         if(md.f4.present()){
            FormalParameterList fm = (FormalParameterList)md.f4.node;
            FormalParameter fm1 = fm.f0;
            // FormalParameterRest fm2 = (FormalParameterRest)fm.f1;
            NodeListOptional fm2 = fm.f1;
            
            k = (int)fm1.f0.f0.which;
            if(k == 3)
            st1 = ((Identifier)(fm1.f0.f0.choice)).f0.tokenImage; //type of formal parameter
            else
            st1 = null;
            st2 = fm1.f1.f0.tokenImage; //identifier name
         // fp_type_map = new HashMap<>();
         // fp_type_map.put(st2, st1);
            vars_type_map.put(st2, st1); //formal parameters list
            for(j= 0; j<fm2.size(); j++){
               // vars_type_map = new HashMap<>();
               FormalParameter fm3 = ((FormalParameterRest)fm2.elementAt(j)).f1; 
               k = (int)fm3.f0.f0.which;
               if(k == 3)
               st1 = ((Identifier)(fm3.f0.f0.choice)).f0.tokenImage; //type of formal parameter
               else
               st1 = null;
               st2 = fm3.f1.f0.tokenImage; //identifier name
               vars_type_map.put(st2, st1); //formal parameters list
            }
         }
         // method_fp_type_map.put(method_name, fp_type_map);
         // vars_type_map = new HashMap<>();
         for(j = 0; j<md.f7.size(); j++){//iterate over no. of variables in a method
            st1 = (String)(((VarDeclaration)md.f7.elementAt(j)).f1.f0.tokenImage);
            k = (int)(((VarDeclaration)md.f7.elementAt(j)).f0.f0.which);
            if(k == 3)
               st2 = ((Identifier)(((VarDeclaration)md.f7.elementAt(j)).f0.f0.choice)).f0.tokenImage;
            else
               st2 = null;
            vars_type_map.put(st1, st2); //{variable name, type}
         }
         method_vars_type_map.put(method_name, vars_type_map); //{method name, {variable name, type}}
         // method_vars_list.clear();
      }
      class_method_names_map.put(classname, method_names_list); //{classname, <method_names>}
      class_method_vars_type_map.put(classname, method_vars_type_map); //{classname, {methodname, {variable name, type}}}
      // class_method_formal_parameter_type_map.put(classname, method_fp_type_map);
      // method_vars_map.clear();
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> ( StaticMethodDeclaration() )*
    * f8 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      String classname, key_var, var_name, method_name, st1, st2;
      ArrayList<String> extends_class = new ArrayList<>();
      ArrayList<String> val_var = new ArrayList<>();
      Iterator it;
      int i, j, k, flag = 0;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      classname = n.f1.f0.tokenImage; //class name
      class_name = classname+"_"+n.f3.f0.tokenImage;
      extends_class.add(n.f3.f0.tokenImage); //extends which class?
      extends_info.put(classname, extends_class); //store inheritance info

      it = inherit_info.entrySet().iterator();
      while(it.hasNext()){ //for each entry in map
         Map.Entry mapElement_1 = (Map.Entry)it.next();
         val_var = (ArrayList)mapElement_1.getValue(); //get the key value
         for(i = 0; i<val_var.size(); i++){ //for each child class check if that class is also inherited by some other class
            if(val_var.get(i).equalsIgnoreCase(n.f3.f0.tokenImage))//check with parent class
            {
               ((ArrayList)mapElement_1.getValue()).add(classname);
               flag = 1;
               break;
            }
         }
      }
      // if(flag == 0)
         inherit_info.put(n.f3.f0.tokenImage, new ArrayList<String>(Arrays.asList(classname)));

      it = extends_info.entrySet().iterator();
      while(it.hasNext()){ //for each entry in map
         Map.Entry mapElement = (Map.Entry)it.next();
         key_var = (String)mapElement.getKey(); //get the key value
         // System.out.println(key_var);
         val_var = (ArrayList)mapElement.getValue(); //get the val value
         // for(String val: val_var){//for each extended class check if that class is also extended by some other class
         for(i = 0; i<val_var.size(); i++){ //for each extended class check if that class is also extended by some other class
            Iterator it1 = extends_info.entrySet().iterator();
            while(it1.hasNext()){
               Map.Entry mapElement_temp = (Map.Entry)it1.next();
               if(val_var.get(i).equalsIgnoreCase((String)mapElement_temp.getKey()))
                  extends_class.addAll((ArrayList)mapElement_temp.getValue()); //append all classes that the searched class inherits
            }
         }
         Set<String> st = new LinkedHashSet<>();
         st.addAll(extends_class);
         extends_class.clear();
         extends_class.addAll(st);
         
            // System.out.println((String)val_var.get(i));
      }
      vars_type_map = new HashMap<>();
      for(i = 0; i<n.f5.size(); i++){//iterate over no. of local variables
         var_name = (String)(((VarDeclaration)n.f5.elementAt(i)).f1.f0.tokenImage);
         k = (int)(((VarDeclaration)(n.f5.elementAt(i))).f0.f0.which);
         if(k == 3)
            st2 = ((Identifier)(((VarDeclaration)n.f5.elementAt(i)).f0.f0.choice)).f0.tokenImage;
         else
            st2 = null;
         vars_type_map.put(var_name, st2); //{class_local_variables, type}
      }
         // String var_name = n.f3.f1.f0.tokenImage;
      class_vars_type_map.put(classname, vars_type_map); //{classname, {local variables, type}}
      // class_vars_list.clear();
      // System.out.println(class_vars_map);
      method_names_list = new ArrayList<>();
      method_vars_type_map = new HashMap<>(); 
      for(i = 0; i<n.f6.size(); i++){//iterate over no. of methods
         MethodDeclaration md = (MethodDeclaration)n.f6.elementAt(i);
         method_name = (String)(md.f2.f0.tokenImage); //method name
         // method_vars_list = new ArrayList<>();
         method_names_list.add(method_name);
         vars_type_map = new HashMap<>();
         if(md.f4.present()){
            FormalParameterList fm = (FormalParameterList)md.f4.node;
            FormalParameter fm1 = fm.f0;
            // FormalParameterRest fm2 = (FormalParameterRest)fm.f1;
            NodeListOptional fm2 = fm.f1;
            
            k = (int)fm1.f0.f0.which;
            if(k == 3)
            st1 = ((Identifier)(fm1.f0.f0.choice)).f0.tokenImage; //type of formal parameter
            else
            st1 = null;
            st2 = fm1.f1.f0.tokenImage; //identifier name
         // fp_type_map = new HashMap<>();
         // fp_type_map.put(st2, st1);
            vars_type_map.put(st2, st1); //formal parameters list
            for(j= 0; j<fm2.size(); j++){
               // vars_type_map = new HashMap<>();
               FormalParameter fm3 = ((FormalParameterRest)fm2.elementAt(j)).f1; 
               k = (int)fm3.f0.f0.which;
               if(k == 3)
               st1 = ((Identifier)(fm3.f0.f0.choice)).f0.tokenImage; //type of formal parameter
               else
               st1 = null;
               st2 = fm3.f1.f0.tokenImage; //identifier name
               vars_type_map.put(st2, st1); //formal parameters list
            }
         }
         for(j = 0; j<md.f7.size(); j++){//iterate over no. of variables in a method
            st1 = (String)(((VarDeclaration)md.f7.elementAt(j)).f1.f0.tokenImage);
            k = (int)(((VarDeclaration)md.f7.elementAt(j)).f0.f0.which);
            if(k == 3)
               st2 = ((Identifier)(((VarDeclaration)md.f7.elementAt(j)).f0.f0.choice)).f0.tokenImage;
            else
               st2 = null;
            vars_type_map.put(st1, st2); //{variable name, type}
         }
         method_vars_type_map.put(method_name, vars_type_map); //{method name, {variable name, type}}
         // method_vars_list.clear();
      }
      class_method_names_map.put(classname, method_names_list); //{classname, <method_names>}
      class_method_vars_type_map.put(classname, method_vars_type_map); //{classname, {methodname, {variable name, type}}}
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> PrimaryExpression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      method_name = n.f2.f0.tokenImage;
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> "static"
    * f2 -> Type()
    * f3 -> Identifier()
    * f4 -> "("
    * f5 -> ( FormalParameterList() )?
    * f6 -> ")"
    * f7 -> "{"
    * f8 -> ( VarDeclaration() )*
    * f9 -> ( Statement() )*
    * f10 -> "return"
    * f11 -> PrimaryExpression()
    * f12 -> ";"
    * f13 -> "}"
    */
   public R visit(StaticMethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ThisStoreStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      String lside = n.f0.f0.tokenImage;
      n.f1.accept(this);
      n.f2.accept(this);
      Expression node = n.f2;
      String rside = visitor.BB.getExpressionString(node);
      if(!method_name.equals("main") && n.f2.f0.which == 11){
         BB currentMethodBB = programCFG.methodBBSet.get(class_name+"_"+method_name);
         // System.out.println(class_name+"_"+method_name);
         // System.out.println(currentMethodBB.name);
         String val = visitor.BB.check_mono(lside, rside, currentMethodBB);
         if(val != null){
            mono_tracker.put(++count, true);
            // System.out.println(val);
            MessageSend curr1 = (MessageSend) n.f2.f0.choice;
            String obj = curr1.f0.f0.tokenImage;
            // System.out.println(obj);
            String func = curr1.f2.f0.tokenImage;
            // System.out.println(func);
            String obj_type = objnum.get(Integer.parseInt(val.substring(1)));
            // System.out.println(obj_type);
            // System.out.println(class_name);
            String params = null;
            if (curr1.f4.present()) {
               StringBuilder sb = new StringBuilder();
               ArgList nn = (ArgList) curr1.f4.node;
               sb.append(visitor.BB.PEString(nn.f0) + " ");
               for (Enumeration<Node> e = nn.f1.elements(); e.hasMoreElements(); ) {
                  ArgRest r = (ArgRest) e.nextElement();
                  sb.append(visitor.BB.PEString(r.f1) + " ");
               }
               params = sb.toString();
               Arrays.toString(params.split(","));
            }
            // System.out.println(params);
            if(params != null)
               class_names_method_names.add(class_name+"."+func+"."+obj+"."+obj_type+"."+params);
            else
               class_names_method_names.add(class_name+"."+func+"."+obj+"."+obj_type+".$");
            // System.out.println(class_names_method_names);
            // String objnum = visitor.BB.global_obj_stack_perbb.get(k)
            // ArrayList<String> arr = inherit_info.get(class_name);
            // for(int i = 0; i<arr.size(); i++){
            //    if(class_method_names_map.get(arr.get(i)).contains(func)){
            //          temp_class_list.add(arr.get(i));
            //    }
            // }
         }
         else 
            mono_tracker.put(++count, false);
      }

      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "Identifier()"
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public R visit(StoreStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> PrimaryExpression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> ThisExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> PrimaryExpression()
    * f5 -> ";"
    */
   public R visit(ThisStoreStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> PrimaryExpression()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> PrimaryExpression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | TypeCast()
    *       | MessageSend()
    *       | LoadStatement()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Identifier()
    * f2 -> ")"
    * f3 -> Identifier()
    */
   public R visit(TypeCast n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> PrimaryExpression()
    */
   public R visit(LoadStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      // BB currentMethodBB = programCFG.methodBBSet.get(method_name);

      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> PrimaryExpression()
    */
   public R visit(ArgRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> PrimaryExpression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String all = n.f1.f0.tokenImage;
      if(!method_name.equalsIgnoreCase("main"))
      objnum.add(all);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

}
